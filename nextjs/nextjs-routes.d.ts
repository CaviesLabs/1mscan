// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
// This file will be automatically regenerated when your Next.js server is running.
// nextjs-routes version: 2.2.1
/* eslint-disable */

// prettier-ignore
declare module "nextjs-routes" {
  import type {
    GetServerSidePropsContext as NextGetServerSidePropsContext,
    GetServerSidePropsResult as NextGetServerSidePropsResult,
  } from "next"

  export type Route =
    | StaticRoute<"/">
    | StaticRoute<"/404">
    | StaticRoute<"/about">
    | StaticRoute<"/staking">
    | StaticRoute<"/earning">
    | DynamicRoute<"/earning/[id]", { id: string }>
    | StaticRoute<"/airdrop">
    | StaticRoute<"/accounts">
    | StaticRoute<"/sei-assets">
    | DynamicRoute<"/address/[hash]", { hash: string }>
    | DynamicRoute<"/address/[hash]/contract-verification", { hash: string }>
    | StaticRoute<"/api-docs">
    | StaticRoute<"/api/csrf">
    | DynamicRoute<"/api/expose/[chain-id]/forward-lcd", { "chain-id": string }>
    | StaticRoute<"/api/healthz">
    | StaticRoute<"/api/media-type">
    | StaticRoute<"/api/proof">
    | StaticRoute<"/api/proxy">
    | StaticRoute<"/auth/profile">
    | StaticRoute<"/auth/profile/account">
    | StaticRoute<"/auth/profile/admin/api-dashboard/credit-definition">
    | DynamicRoute<
        "/auth/profile/admin/api-dashboard/customer/[id]",
        { id: string }
      >
    | StaticRoute<"/auth/profile/admin/api-dashboard/customers">
    | StaticRoute<"/auth/profile/admin/api-dashboard/packages">
    | DynamicRoute<
        "/auth/profile/admin/api-dashboard/packages/[id]",
        { id: string }
      >
    | StaticRoute<"/auth/profile/admin/api-dashboard/payment-list">
    | StaticRoute<"/auth/profile/admin/api-dashboard/token-submitted">
    | StaticRoute<"/auth/profile/api-key-stats">
    | StaticRoute<"/auth/profile/api-keys">
    | StaticRoute<"/auth/profile/custom-abi">
    | StaticRoute<"/auth/profile/private-tags">
    | StaticRoute<"/auth/profile/watchlist">
    | StaticRoute<"/tool">
    | StaticRoute<"/tool/associate">
    | StaticRoute<"/tool/wallet-profile">
    | StaticRoute<"/tool/send-token">
    | StaticRoute<"/tool/multisender">
    | StaticRoute<"/tool/address-book">
    | StaticRoute<"/tool/revoke">
    | StaticRoute<"/tool/faucet">
    | StaticRoute<"/tool/profile-checker">
    | DynamicRoute<"/block/[height_or_hash]", { height_or_hash: string }>
    | StaticRoute<"/blocks">
    | StaticRoute<"/brand-assets">
    | StaticRoute<"/claim-reward">
    | DynamicRoute<"/claim-reward/[id]", { id: string }>
    | StaticRoute<"/code-id-verification">
    | DynamicRoute<"/code-id/[id]", { id: string }>
    | StaticRoute<"/code-ids">
    | StaticRoute<"/contract-verification">
    | StaticRoute<"/csv-export">
    | DynamicRoute<
        "/ibc-relayer/[channel_id]/counterparty/[counterparty_channel_id]",
        { channel_id: string; counterparty_channel_id: string }
      >
    | StaticRoute<"/ibc-relayers">
    | StaticRoute<"/insights">
    | StaticRoute<"/insights-docs">
    | StaticRoute<"/nfts">
    | StaticRoute<"/parameters">
    | StaticRoute<"/privacy">
    | DynamicRoute<"/proposal/[id]", { id: string }>
    | StaticRoute<"/proposals">
    | StaticRoute<"/hybrids">
    | StaticRoute<"/stats">
    | DynamicRoute<"/subscriptions/[id]", { id: string }>
    | StaticRoute<"/subscriptions/payment">
    | StaticRoute<"/terms">
    | StaticRoute<"/test">
    | StaticRoute<"/test2">
    | StaticRoute<"/test3">
    | DynamicRoute<"/token/[...slug]", { slug: string[] }>
    | StaticRoute<"/tokens">
    | DynamicRoute<"/tx/[hash]", { hash: string }>
    | StaticRoute<"/txs">
    | StaticRoute<"/types">
    | StaticRoute<"/unauthorization">
    | DynamicRoute<"/validator/[hash]", { hash: string }>
    | StaticRoute<"/validators">
    | StaticRoute<"/verified-contracts">
    | StaticRoute<"/verified-contracts-native">
    | StaticRoute<"/workspace/callback">
    | StaticRoute<"/token/submit">
    | StaticRoute<"/webpacy">

  interface StaticRoute<Pathname> {
    pathname: Pathname
    query?: Query | undefined
    hash?: string | null | undefined
  }

  interface DynamicRoute<Pathname, Parameters> {
    pathname: Pathname
    query: Parameters & Query
    hash?: string | null | undefined
  }

  interface Query {
    [key: string]: string | string[] | undefined
  }

  export type RoutedQuery<P extends Route["pathname"]> = Extract<
    Route,
    { pathname: P }
  >["query"]

  export type Locale = undefined

  /**
   * A typesafe utility function for generating paths in your application.
   *
   * route({ pathname: "/foos/[foo]", query: { foo: "bar" }}) will produce "/foos/bar".
   */
  export declare function route(r: Route): string

  /**
   * Nearly identical to GetServerSidePropsContext from next, but further narrows
   * types based on nextjs-route's route data.
   */
  export type GetServerSidePropsContext<
    Pathname extends Route["pathname"] = Route["pathname"],
    Preview extends
      NextGetServerSidePropsContext["previewData"] = NextGetServerSidePropsContext["previewData"],
  > = Omit<
    NextGetServerSidePropsContext,
    "params" | "query" | "defaultLocale" | "locale" | "locales"
  > & {
    params: Extract<Route, { pathname: Pathname }>["query"]
    query: Query
    defaultLocale?: undefined
    locale?: Locale
    locales?: undefined
  }

  /**
   * Nearly identical to GetServerSideProps from next, but further narrows
   * types based on nextjs-route's route data.
   */
  export type GetServerSideProps<
    Props extends { [key: string]: any } = { [key: string]: any },
    Pathname extends Route["pathname"] = Route["pathname"],
    Preview extends
      NextGetServerSideProps["previewData"] = NextGetServerSideProps["previewData"],
  > = (
    context: GetServerSidePropsContext<Pathname, Preview>,
  ) => Promise<NextGetServerSidePropsResult<Props>>
}

// prettier-ignore
declare module "next/link" {
  import type { LinkProps as NextLinkProps } from "next/dist/client/link"
  import type { Route } from "nextjs-routes"
  import type {
    AnchorHTMLAttributes,
    DetailedReactHTMLElement,
    MouseEventHandler,
    PropsWithChildren,
  } from "react"
  export * from "next/dist/client/link"

  type StaticRoute = Exclude<Route, { query: any }>["pathname"]

  export interface LinkProps
    extends Omit<NextLinkProps, "href" | "locale">,
      AnchorHTMLAttributes<HTMLAnchorElement> {
    href: Route | StaticRoute | Omit<Route, "pathname">
    locale?: false
  }

  type LinkReactElement = DetailedReactHTMLElement<
    {
      onMouseEnter?: MouseEventHandler<Element> | undefined
      onClick: MouseEventHandler
      href?: string | undefined
      ref?: any
    },
    HTMLElement
  >

  declare function Link(props: PropsWithChildren<LinkProps>): LinkReactElement

  export default Link
}

// prettier-ignore
declare module "next/router" {
  import type { NextRouter as Router } from "next/dist/client/router"
  import type { Locale, Route } from "nextjs-routes"
  export * from "next/dist/client/router"
  export { default } from "next/dist/client/router"

  type NextTransitionOptions = NonNullable<Parameters<Router["push"]>[2]>
  type StaticRoute = Exclude<Route, { query: any }>["pathname"]

  interface TransitionOptions extends Omit<NextTransitionOptions, "locale"> {
    locale?: false
  }

  type PathnameAndQuery<Pathname> = Required<
    Pick<Extract<Route, { pathname: Pathname }>, "pathname" | "query">
  >

  type AutomaticStaticOptimizedQuery<PaQ> = Omit<PaQ, "query"> & {
    query: Partial<PaQ["query"]>
  }

  type BaseRouter<PaQ> =
    | ({ isReady: false } & AutomaticStaticOptimizedQuery<PaQ>)
    | ({ isReady: true } & PaQ)

  export type NextRouter<P extends Route["pathname"] = Route["pathname"]> =
    BaseRouter<PathnameAndQuery<P>> &
      Omit<
        Router,
        | "defaultLocale"
        | "domainLocales"
        | "isReady"
        | "locale"
        | "locales"
        | "pathname"
        | "push"
        | "query"
        | "replace"
        | "route"
      > & {
        defaultLocale?: undefined
        domainLocales?: undefined
        locale?: Locale
        locales?: undefined
        push(
          url: Route | StaticRoute | Omit<Route, "pathname">,
          as?: string,
          options?: TransitionOptions,
        ): Promise<boolean>
        replace(
          url: Route | StaticRoute | Omit<Route, "pathname">,
          as?: string,
          options?: TransitionOptions,
        ): Promise<boolean>
        route: P
      }

  export function useRouter<P extends Route["pathname"]>(): NextRouter<P>
}
